{"version":3,"sources":["index.js"],"names":["App","useState","sec","setSec","status","setStatus","waiting","setWaiting","startStop","useRef","wait","reset","setWaitingStatus","useEffect","stremInterval$","interval","subscribe","prevSecond","unsubscribe","startStopStream$","fromEvent","current","waitStream$","timer","setTimeout","clearInterval","resetStream$","className","Date","toISOString","slice","ref","render","document","getElementById"],"mappings":"sLAMA,SAASA,IACP,MAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAYC,mBACZC,EAAOD,mBACPE,EAAQF,mBAgDd,SAASG,IACPL,GAAW,GACXF,EAAU,OAGZ,OAnDAQ,qBAAU,WACR,IAAMC,EAAiBC,YAAS,KAC7BC,WAAU,WACM,QAAXZ,GACFD,GAAO,SAAAc,GAAU,OAAIA,EAAa,UAGxC,OAAO,WACLH,EAAeI,iBAGhB,CAACd,IAEJS,qBAAU,WACR,IAAMM,EAAmBC,YAAUZ,EAAUa,QAAS,SAASL,WAAU,WACvE,GAAc,QAAXZ,EAGD,OAFAD,EAAO,QACPE,EAAU,QAGZO,OAEIU,EAAcF,YAAUV,EAAKW,QAAS,SAASL,WAAU,WAC7D,GAAc,SAAXZ,EACH,GAAGE,EACDM,SAGF,IAAMW,EAAQC,YAAW,WACvBnB,EAAU,QACVE,GAAW,GACXkB,cAAcF,KACd,QAEEG,EAAeN,YAAUT,EAAMU,QAAS,SAASL,WAAU,WAC/Db,EAAO,GACPS,OAGF,OAAO,WACLO,EAAiBD,cACjBI,EAAYJ,cACZQ,EAAaR,kBAUf,qBAAKS,UAAU,iBAAf,SACE,sBAAKA,UAAU,cAAf,UACE,2CACE,qBAAKA,UAAU,mBAAf,SAAmC,IAAIC,KAAK1B,GAAK2B,cAAcC,MAAM,GAAI,MACzE,gCACE,wBAAQC,IAAKvB,EAAb,0BACA,wBAAQuB,IAAKrB,EAAb,kBACA,wBAAQqB,IAAKpB,EAAb,2BAOZqB,iBAAO,cAAChC,EAAD,IAASiC,SAASC,eAAe,U","file":"static/js/main.25ca88e6.chunk.js","sourcesContent":["import React, {useRef} from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport { useEffect, useState } from \"react\";\nimport { interval,fromEvent } from \"rxjs\";\n\nfunction App() {\n  const [sec, setSec] = useState(0);\n  const [status, setStatus] = useState(\"stop\");\n  const [waiting, setWaiting] = useState(false);\n\n  const startStop = useRef(); \n  const wait = useRef(); \n  const reset = useRef(); \n  \n  useEffect(() => {\n    const stremInterval$ = interval(1000)\n      .subscribe(() => {\n        if (status === \"run\") {\n          setSec(prevSecond => prevSecond + 1000);\n        }\n      });\n    return () => {\n      stremInterval$.unsubscribe();\n    };\n\n  }, [status]);\n\n  useEffect(() => {\n    const startStopStream$ = fromEvent(startStop.current, 'click').subscribe(() => {\n      if(status === \"run\") {\n        setSec(0);\n        setStatus(\"stop\");\n        return;\n      }\n      setWaitingStatus();\n    });\n    const waitStream$ = fromEvent(wait.current, 'click').subscribe(() => {\n      if(status === \"stop\") {return}\n      if(waiting){ \n        setWaitingStatus();\n        return;\n      }\n      const timer = setTimeout(()=> {\n        setStatus(\"wait\");\n        setWaiting(true);\n        clearInterval(timer);\n      },300);\n    });\n    const resetStream$ = fromEvent(reset.current, 'click').subscribe(() => {\n      setSec(0);\n      setWaitingStatus();\n    });\n\n    return () => {\n      startStopStream$.unsubscribe();\n      waitStream$.unsubscribe();\n      resetStream$.unsubscribe();\n    }\n  });\n\n  function setWaitingStatus() {\n    setWaiting(false);\n    setStatus(\"run\");\n  }\n\n  return (\n    <div className=\"timer__wrapper\">\n      <div className=\"timer__item\">\n        <h1>Stopwatch</h1>\n          <div className=\"timer__item-time\">{new Date(sec).toISOString().slice(11, 19)}</div>\n          <div>\n            <button ref={startStop}>Start / Stop</button>\n            <button ref={wait}>wait</button>\n            <button ref={reset}>Reset</button>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nrender(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}